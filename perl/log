#!/usr/bin/perl

#sortuje logi wedlug ilosci wystapien, jesli jest rowna to wedlug kolejnosci ASCI wartosci (nazwy) logu
#wyswietlanie przez perl formats

#ilosc dni od poczatku roku YearMonth 2 Day
# potrzbna aby otrzymac czy istnieje 2 sek przesuniecie 
# miedzy np 31.12.16 23:59:59 i 01.01.17 00:00:01 
# w pliku log.txt wartosci sa z 1 dnia, ale program bedzie dzialac rowniez na krawedziach dni, roku etc
# $ilosc_dni_od_poczatku_roku = $ym2d{$month[$isLeapYear]
%ym2d= ("01"=>	[0,0],
	"02"=>	[31,31],
	"03"=>	[59,60],
	"04"=>	[90,91],
	"05"=>	[120,121],
	"06"=>	[151,152],
	"07"=>	[181,82],
	"08"=>	[212,213],
	"09"=>	[243,244],
	"10"=>	[273,74],
	"11"=>	[304,305],
	"12"=>	[334,335]);
	
# oblicznie ilosci dni dodanych przez rok przestepny int($rok/4);
# obliczanie ilosci minionych dni co do dnia miesiaca 
# int($rok/4) + $rok*365 + $ym2d{$miesiac}[int(($rok%4)=~0)] + ($dzien-1);
# obliczanie ilosci minionych godzin co do godziny
# (int($rok/4) + $rok*365 + $ym2d{$miesiac}[int(($rok%4)=~0)] + ($dzien-1))*24 + $godzina;
# obliczanie ilosci minionych minut co do minuty
# ((int($rok/4) + $rok*365 + $ym2d{$miesiac}[int(($rok%4)=~0)] + ($dzien-1))*24 + $godzina)*60 + $minuta;
# obliczanie ilosci minionych sekund co do sekundy
# (((int($rok/4) + $rok*365 + $ym2d{$miesiac}[int(($rok%4)=~0)] + ($dzien-1))*24 + $godzina)*60 + $minuta)*60 + $sekundy;
#
# testy
#$rok='5';
#$miesiac='01';
#$dzien='01';
#$godzina='00';
#$minuta='00';
#$sekundy='01';
#$odp=(((int($rok/4) + $rok*365 + $ym2d{$miesiac}[int(($rok%4)=~0)] + ($dzien-1))*24 + $godzina)*60 + $minuta)*60 + $sekundy;
#print($odp);
#print("\n");
# koniec testow

sub getSec { return (((int($_[0]/4) + $_[0]*365 + $ym2d{$_[1]}[int(($_[0]%4)=~0)] + ($_[2]-1))*24 + $_[3])*60 + $_[4])*60 + $_[5]; } # funkcja zwracjaca ilosc sekund dla okreslonej tablicy daty= ( yyyy, mm, dd, hh, mm, ss, );

#wzor na poprawne logi
$pattern='(^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}, [+#]([0-9]*\.[0-9]*)* \*,[a-zA-z]{2}\/[a-zA-z]{2}, [0-9]*, [a-zA-z0-9]*\(.*\), AGENT=.*$)';
while (<>)
{
	if (!($_ =~ $pattern)) {print("Line doesn't match pattern: file:$ARGV line:$.\n");} # reakcja na nieprawidlowa strukture pliku
	else
	{
		@info=split(/,/);
		@lanCou=split(/\//, $info[2]); # wyciagniecie jezyka i kraju
		$lan{$lanCou[0]}++; # dodanie 1 do aktualnej ilosci wersji jezykowych
		$cou{$lanCou[1]}++;	# dodanie 1 do aktualnej ilosci numerow krajow
		$ip{substr($info[1],2,-2)}++;	# dodanie 1 do aktualnej ilosci numerow ip
		$bro{substr((split(/AGENT=/))[1],1,-1)}++;	# dodanie 1 do aktualnej ilosci numerow przegladarek
		$ser{substr((split(/\(/,$info[4]))[0],1)}++; # dodanie 1 do uslug
		$tpi{substr($info[1],2,-2)}{0}=$tpi{substr($info[1],2,-2)}{1}; #czas poprzednich odwiedzin dla ip uaktalniony 
		$tpi{substr($info[1],2,-2)}{1}=$info[0]; # czas aktualnych odwiedzin dla ip
		if (!$tsv{substr($info[1],2,-2)}) # jesli adres ip nie jest na liscie odwiedzajacych co 2 sek
		{
			@time0=split(/[- :]/,$tpi{substr($info[1],2,-2)}{0});
			@time1=split(/[- :]/,$tpi{substr($info[1],2,-2)}{1});
			if (@time0)  # jesli mamy oba czasy , (w 1 iteracji beda tylko 1 odwiedziny) 
			{
				if (getSec(@time1)-getSec(@time0)<2) # czas pomiedzy dostepami z okreslonego IP jest mniejszy niz 2 sec (MNIEJSZY NIE MNIEJSZY LUB ROWNY!!)
				{
					$tsv{substr($info[1],2,-2)}='Y';#dodanie do listy odwiedzajacych ip w przeciagu 2 sek
				}

			}
		}
	}
}

format OUTPUT_TOP =

=========================================================================================================
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< @>>>>
$HEAD,                                                                                               'VAL'
=========================================================================================================
.

format OUTPUT =
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< @>>>>
$name, $val
---------------------------------------------------------------------------------------------------------
.
select(STDOUT);

@HEADS=('LANGUAGE', 'NATIONALITY','IP','BROWSWER','SERVICE','IP with -lt 2 sec pause'); 
@HASHS=(\%lan,\%cou,\%ip,\%bro,\%ser,\%tsv);
$i=0;
foreach $HEAD ( @HEADS )
{
	if ((%{$HASHS[$i]}))
	{
		$~ = OUTPUT_TOP;
		write;
		foreach $name (@names = sort { $HASHS[$i]{$b} <=> $HASHS[$i]{$a} or $a cmp $b } keys (%{$HASHS[$i]}) )
		{
			$val=$HASHS[$i]{$name};
			$~ = OUTPUT;
			write;
		}
	}
	$i++;
}